const deviceScreen = Dimensions.get('window');

export default function decorateDraggable(component, options) {
  return class DraggableContainer extends React.Component {
    static propTypes = {
      direction: PropTypes.string,
      distance: PropTypes.number,
      tolerance: PropTypes.number,
      snap: PropTypes.bool,
      handleMoveShouldSetPanResponder: PropTypes.func,
    }

    static defaultProps = {
      direction: 'right',
      distance: deviceScreen.width * 2 / 3,
      tolerance: deviceScreen.width * 2 / 3,
      snap: true,
      handleMoveShouldSetPanResponder: () => true,
    }

    componentWillMount() {
      this.responder = PanResponder.create({
        onMoveShouldSetPanResponder: this.props.handleMoveShouldSetPanResponder.bind(this),
        onPanResponderMove: this.handlePanResponderMove.bind(this),
        onPanResponderRelease: this.handlePanResponderEnd.bind(this),
      });
    }

    /**
     * Handler on responder move
     * @param  {Synthetic Event} e
     * @param  {Object} gestureState
     * @return {Void}
     */
    handlePanResponderMove(e: Object, gestureState: Object) {
      if (this.state.left.__getValue() >= 0 ) {
        this.state.left.setValue(this.prevLeft + gestureState.dx);
      }
    }

    /**
     * Handler on responder move ending
     * @param  {Synthetic Event} e
     * @param  {Object} gestureState
     * @return {Void}
     */
    handlePanResponderEnd(e: Object, gestureState: Object) {
      const currentLeft = this.state.left.__getValue();

      const shouldOpen = this.menuPositionMultiplier() *
        (currentLeft + gestureState.dx);

      if (shouldOpenMenu(shouldOpen)) {
        this.openMenu();
      } else {
        this.closeMenu();
      }
    }

    render() {
      return this.props.children;
    }
  };
}
