'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Dependencies

var _events = require('events');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

// Class Variables
var CHANGE_EVENT = 'change';

/*
 * Flux Capacitors
 * // todo: write useful comments
 */
function createCapacitor(options, Dispatcher) {
    // validation
    if (!Dispatcher) throw new Error('You must provide a Flux Dispatcher to register this store with.');
    if (!_lodash2['default'].has(options, 'actionHandlers')) throw new Error('Your store must provide an `actionHandlers` property mapping handlers to flux `action.type` constants');

    //
    var emitter = new _events.EventEmitter();
    emitter.setMaxListeners(0);

    //
    var eventMethods = {
        emitChange: function emitChange() {
            emitter.emit(CHANGE_EVENT);
        },
        addChangeListener: function addChangeListener(callback) {
            emitter.on(CHANGE_EVENT, callback);
        },
        removeChangeListener: function removeChangeListener(callback) {
            emitter.removeListener(CHANGE_EVENT, callback);
        }
    };

    //
    var actionHandlers = options.actionHandlers;

    var storeOptions = _objectWithoutProperties(options, ['actionHandlers']);

    var store = _objectAssign2['default']({}, storeOptions, eventMethods);

    store.dispatchToken = Dispatcher.register(function (action) {
        if (_lodash2['default'].has(actionHandlers, action.type)) {
            var actionHandler = actionHandlers[action.type];
            actionHandler.call(store, action);
        }
    });

    return store;
}

/*
 * Flux Capacitors Mixin
 * // todo: write useful comments
 */
var capacitorMixin = {
    getInitialState: function getInitialState() {
        return this.getState();
    },
    componentDidMount: function componentDidMount() {
        var _this = this;

        if (!this.listenTo) {
            return;
        }
        if (_lodash2['default'].isArray(this.listenTo)) {
            _lodash2['default'].each(this.listenTo, function (store) {
                store.addChangeListener(_this.onChange);
            });
        } else {
            this.listenTo.addChangeListener(this.onChange);
        }
    },
    componentWillUnmount: function componentWillUnmount() {
        var _this2 = this;

        if (!this.listenTo) {
            return;
        }

        if (_lodash2['default'].isArray(this.listenTo)) {
            _lodash2['default'].each(this.listenTo, function (store) {
                store.removeChangeListener(_this2.onChange);
            });
        } else {
            this.listenTo.removeChangeListener(this.onChange);
        }
    },
    onChange: function onChange() {
        this.setState(this.getState());
    }
};

exports.Capacitor = createCapacitor;
exports.Mixin = capacitorMixin;
//# sourceMappingURL=data:application/json;base64,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U0FDTixNQUFNO0FBQ0gsZ0JBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JEO0tBQ0o7QUFDRCxZQUFRLEVBQUMsb0JBQUc7QUFDUixZQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ2xDO0NBQ0osQ0FBQzs7UUFFMEIsU0FBUyxHQUE1QixlQUFlO1FBQWlDLEtBQUssR0FBdkIsY0FBYyIsImZpbGUiOiJjYXBhY2l0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZXBlbmRlbmNpZXNcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5cbi8vIENsYXNzIFZhcmlhYmxlc1xuY29uc3QgQ0hBTkdFX0VWRU5UID0gJ2NoYW5nZSc7XG5cblxuXG4vKlxuICogRmx1eCBDYXBhY2l0b3JzXG4gKiAvLyB0b2RvOiB3cml0ZSB1c2VmdWwgY29tbWVudHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FwYWNpdG9yIChvcHRpb25zLCBEaXNwYXRjaGVyKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghRGlzcGF0Y2hlcikgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgRmx1eCBEaXNwYXRjaGVyIHRvIHJlZ2lzdGVyIHRoaXMgc3RvcmUgd2l0aC4nKTtcbiAgICBpZiAoIV8uaGFzKG9wdGlvbnMsICdhY3Rpb25IYW5kbGVycycpKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgc3RvcmUgbXVzdCBwcm92aWRlIGFuIGBhY3Rpb25IYW5kbGVyc2AgcHJvcGVydHkgbWFwcGluZyBoYW5kbGVycyB0byBmbHV4IGBhY3Rpb24udHlwZWAgY29uc3RhbnRzJyk7XG5cbiAgICAvL1xuICAgIHZhciBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBlbWl0dGVyLnNldE1heExpc3RlbmVycygwKTtcblxuICAgIC8vXG4gICAgdmFyIGV2ZW50TWV0aG9kcyA9IHtcbiAgICAgICAgICAgIGVtaXRDaGFuZ2UgKCkge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChDSEFOR0VfRVZFTlQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZENoYW5nZUxpc3RlbmVyIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIub24oQ0hBTkdFX0VWRU5ULCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXIgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihDSEFOR0VfRVZFTlQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIC8vXG4gICAgdmFyIHsgYWN0aW9uSGFuZGxlcnMsIC4uLnN0b3JlT3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICB2YXIgc3RvcmUgPSBhc3NpZ24oe30sIHN0b3JlT3B0aW9ucywgZXZlbnRNZXRob2RzKTtcblxuICAgIHN0b3JlLmRpc3BhdGNoVG9rZW4gPSBEaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKF8uaGFzKGFjdGlvbkhhbmRsZXJzLCBhY3Rpb24udHlwZSkpIHtcbiAgICAgICAgICAgIGxldCBhY3Rpb25IYW5kbGVyID0gYWN0aW9uSGFuZGxlcnNbYWN0aW9uLnR5cGVdO1xuICAgICAgICAgICAgYWN0aW9uSGFuZGxlci5jYWxsKHN0b3JlLCBhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3RvcmU7XG59XG5cbi8qXG4gKiBGbHV4IENhcGFjaXRvcnMgTWl4aW5cbiAqIC8vIHRvZG86IHdyaXRlIHVzZWZ1bCBjb21tZW50c1xuICovXG52YXIgY2FwYWNpdG9yTWl4aW4gPSB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAgICAgaWYoIXRoaXMubGlzdGVuVG8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZihfLmlzQXJyYXkodGhpcy5saXN0ZW5UbykpIHtcbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLmxpc3RlblRvLCAoc3RvcmUpID0+IHtcbiAgICAgICAgICAgICAgICBzdG9yZS5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLm9uQ2hhbmdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5Uby5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLm9uQ2hhbmdlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgICAgICBpZighdGhpcy5saXN0ZW5Ubykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoXy5pc0FycmF5KHRoaXMubGlzdGVuVG8pKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5saXN0ZW5UbywgKHN0b3JlKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8ucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG9uQ2hhbmdlICgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmdldFN0YXRlKCkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNhcGFjaXRvciBhcyBDYXBhY2l0b3IsIGNhcGFjaXRvck1peGluIGFzIE1peGluIH07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=