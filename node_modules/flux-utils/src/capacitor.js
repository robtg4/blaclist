// Dependencies
import { EventEmitter } from 'events';
import assign from 'object-assign';
import _ from 'lodash';



// Class Variables
const CHANGE_EVENT = 'change';



/*
 * Flux Capacitors
 * // todo: write useful comments
 */
function createCapacitor (options, Dispatcher) {
    // validation
    if (!Dispatcher) throw new Error('You must provide a Flux Dispatcher to register this store with.');
    if (!_.has(options, 'actionHandlers')) throw new Error('Your store must provide an `actionHandlers` property mapping handlers to flux `action.type` constants');

    //
    var emitter = new EventEmitter();
        emitter.setMaxListeners(0);

    //
    var eventMethods = {
            emitChange () {
                emitter.emit(CHANGE_EVENT);
            },
            addChangeListener (callback) {
                emitter.on(CHANGE_EVENT, callback);
            },
            removeChangeListener (callback) {
                emitter.removeListener(CHANGE_EVENT, callback);
            }
        };

    //
    var { actionHandlers, ...storeOptions } = options;
    var store = assign({}, storeOptions, eventMethods);

    store.dispatchToken = Dispatcher.register(function (action) {
        if (_.has(actionHandlers, action.type)) {
            let actionHandler = actionHandlers[action.type];
            actionHandler.call(store, action);
        }
    });

    return store;
}

/*
 * Flux Capacitors Mixin
 * // todo: write useful comments
 */
var capacitorMixin = {
    getInitialState () {
        return this.getState();
    },
    componentDidMount () {
        if(!this.listenTo) {
            return;
        }
        if(_.isArray(this.listenTo)) {
            _.each(this.listenTo, (store) => {
                store.addChangeListener(this.onChange);
            });
        } else {
            this.listenTo.addChangeListener(this.onChange);
        }
    },
    componentWillUnmount () {
        if(!this.listenTo) {
            return;
        }

        if(_.isArray(this.listenTo)) {
            _.each(this.listenTo, (store) => {
                store.removeChangeListener(this.onChange);
            });
        } else {
            this.listenTo.removeChangeListener(this.onChange);
        }
    },
    onChange () {
        this.setState(this.getState());
    }
};

export { createCapacitor as Capacitor, capacitorMixin as Mixin };
