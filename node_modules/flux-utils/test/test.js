// Test Dependencies
var
    assert      = require('chai').assert,
    expect      = require('chai').expect,
    should      = require('chai').should();




// Import Dependencies
var
    Capacitor   = require('../').Capacitor,
    Dispatcher  = require('flux').Dispatcher;



// Reusables
var
    basicStore = { actionHandlers: { 'action.type': function actionTypeHandler (action) {} } },
    basicDispatcher = new Dispatcher();



// Tests
describe('Flux Utils', function () {
    describe('Creating Capacitor Stores', function () {
        it('should expose #createCapacitor by default', function () {
            expect(Capacitor.name).to.equal('createCapacitor');
        });

        it('should create a store given actionHandlers and a Dispatcher', function () {
            expect(goodCapacitor).to.not.throw(Error);
        });
        it('should throw if not provided a Flux Dispatcher', function () {
            expect(badCapacitor).to.throw(Error);
        });
        it('should throw if actionHandlers contains an invalid or missing action.type');
    });

    describe('Using created stores', function () {
        var store = goodCapacitor();

        it('should expose a store.dispatchToken for use with Dispatcher#waitFor()', function () {
            expect(store).to.have.property('dispatchToken');
            expect(store.dispatchToken).to.be.ok;
        });

        it('should expose store#emitChange()', function () {
            expect(store).to.have.property('emitChange');
            expect(store.emitChange).to.be.a('function');
        });

        it('should expose store#addChangeListener()', function () {
            expect(store).to.have.property('addChangeListener');
            expect(store.addChangeListener).to.be.a('function');
        });

        it('should expose store#removeChangeListener()', function () {
            expect(store).to.have.property('removeChangeListener');
            expect(store.removeChangeListener).to.be.a('function');
        });

        it('should not expose store.actionHandlers', function () {
            expect(store).to.not.have.property('actionHandlers');
        });

        it('should invoke appropriate actionHandler for registered action.type');
        it('emitChange() should invoke provided change callbacks');
    });

    describe('Using Capacitor Mixin', function () {
        it('should have more tests stubbed out than this');
    });
});



// Class Functions
function badCapacitor () {
    var store = Capacitor(basicStore);
}

function goodCapacitor () {
    var store = Capacitor(basicStore, basicDispatcher);
    return store;
}
